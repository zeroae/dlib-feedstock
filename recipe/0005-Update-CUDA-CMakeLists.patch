From 45358a75b8fe637a10d0671cb2ad56a85c407287 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Patrick=20Sodr=C3=A9?= <psodre@gmail.com>
Date: Sat, 10 Oct 2020 02:05:53 -0400
Subject: [PATCH 5/5] Update CUDA CMakeLists

---
 dlib/CMakeLists.txt | 50 +++++++++++++++++++++++----------------------
 1 file changed, 26 insertions(+), 24 deletions(-)

diff --git a/dlib/CMakeLists.txt b/dlib/CMakeLists.txt
index 84931a31..d7550213 100644
--- a/dlib/CMakeLists.txt
+++ b/dlib/CMakeLists.txt
@@ -18,6 +18,8 @@ endif()
 
 project(dlib)
 
+include(CheckLanguage)
+
 set(CPACK_PACKAGE_NAME "dlib")
 set(CPACK_PACKAGE_VERSION_MAJOR "19")
 set(CPACK_PACKAGE_VERSION_MINOR "21")
@@ -601,7 +603,11 @@ if (NOT TARGET dlib)
 
 
       if (DLIB_USE_CUDA)
-         find_package(CUDA 7.5)
+         check_language(CUDA)
+         if (CMAKE_CUDA_COMPILER)
+            enable_language(CUDA)
+            set(CUDA_FOUND ON)
+         endif()
 
          if (CUDA_VERSION VERSION_GREATER 9.1 AND CMAKE_VERSION VERSION_LESS 3.12.2)
             # This bit of weirdness is to work around a bug in cmake 
@@ -634,23 +640,12 @@ if (NOT TARGET dlib)
             endif()
 
             set(CUDA_HOST_COMPILATION_CPP ON)
+            set(CMAKE_CUDA_RUNTIME_LIBRARY Shared)
             # Note that we add __STRICT_ANSI__ to avoid freaking out nvcc with gcc specific
             # magic in the standard C++ header files (since nvcc uses gcc headers on
             # linux).
-            list(APPEND CUDA_NVCC_FLAGS "-arch=sm_50;-D__STRICT_ANSI__;-D_MWAITXINTRIN_H_INCLUDED;-D_FORCE_INLINES;${FLAGS_FOR_NVCC}")
-            list(APPEND CUDA_NVCC_FLAGS ${active_preprocessor_switches})
             if (NOT DLIB_IN_PROJECT_BUILD)
-               LIST(APPEND CUDA_NVCC_FLAGS -DDLIB__CMAKE_GENERATED_A_CONFIG_H_FILE)
-            endif()
-            if (NOT MSVC)
-               list(APPEND CUDA_NVCC_FLAGS "-std=c++11")
-            endif()
-            if (CMAKE_POSITION_INDEPENDENT_CODE)
-               # sometimes this setting isn't propagated to NVCC, which then causes the
-               # compile to fail.  So make sure it's propagated.
-               if (NOT MSVC) # Visual studio doesn't have -fPIC so don't do it in that case.
-                  list(APPEND CUDA_NVCC_FLAGS "-Xcompiler -fPIC")
-               endif()
+               list(APPEND CMAKE_CUDA_FLAGS -DDLIB__CMAKE_GENERATED_A_CONFIG_H_FILE)
             endif()
 
             include(cmake_utils/test_for_cudnn/find_cudnn.txt)
@@ -753,12 +748,26 @@ if (NOT TARGET dlib)
                cuda/cuda_data_ptr.cpp
                cuda/gpu_data.cpp
                )
+            set_source_files_properties(
+               cuda/cuda_dlib.cu
+               cuda/cudnn_dlibapi.cpp
+               cuda/cublas_dlibapi.cpp
+               cuda/cusolver_dlibapi.cu
+               cuda/curand_dlibapi.cpp
+               cuda/cuda_data_ptr.cpp
+               cuda/gpu_data.cpp
+               PROPERTIES LANGUAGE CUDA)
+
+            find_library(CUDA_cublas_LIBRARY cublas)
+            find_library(CUDA_curand_LIBRARY curand)
+            find_library(CUDA_cudart_LIBRARY cudart)
+
             set(dlib_needed_libraries ${dlib_needed_libraries} 
-               ${CUDA_CUBLAS_LIBRARIES} 
+               ${CUDA_cublas_LIBRARY} 
                ${cudnn}
                ${CUDA_curand_LIBRARY}
                ${CUDA_cusolver_LIBRARY}
-               ${CUDA_CUDART_LIBRARY}
+               ${CUDA_cudart_LIBRARY}
                )
             if(openmp_libraries)
                list(APPEND dlib_needed_libraries ${openmp_libraries})
@@ -812,14 +821,7 @@ if (NOT TARGET dlib)
 
 
       # Tell CMake to build dlib via add_library()/cuda_add_library()
-      if (DLIB_USE_CUDA)
-         # The old cuda_add_library() command doesn't support CMake's newer dependency
-         # stuff, so we have to set the include path manually still, which we do here.
-         include_directories(${dlib_needed_includes})
-         cuda_add_library(dlib ${source_files} )
-      else()
-         add_library(dlib ${source_files} )
-      endif()
+      add_library(dlib ${source_files} )
 
    endif ()  ##### end of if NOT DLIB_ISO_CPP_ONLY ##########################################################
 
-- 
2.17.1

